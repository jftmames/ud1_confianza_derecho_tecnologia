
---

# app.py

```python
import os
import io
import random
import string
import hmac
import hashlib
from datetime import datetime, timezone
from dateutil import tz

import pandas as pd
import streamlit as st

# ---------------------------
# Configuraci√≥n general
# ---------------------------
st.set_page_config(
    page_title="UD1 ‚Äî Confianza en el Derecho y la tecnolog√≠a",
    page_icon="‚úÖ",
    layout="wide",
)

PRIMARY = "#0f766e"
os.makedirs("entregas", exist_ok=True)
os.makedirs("materiales", exist_ok=True)

# ---------------------------
# Utilidades
# ---------------------------
def sha256_hex(text: str) -> str:
    return hashlib.sha256(text.encode("utf-8")).hexdigest()

def alter_one_char(text: str) -> str:
    if not text:
        return text
    pos = random.randrange(len(text))
    original_char = text[pos]
    # Alfabeto de sustituci√≥n b√°sico (evita repetir el mismo char)
    alphabet = string.ascii_letters + string.digits + " .,-_:;()¬ø?¬°!/'\""
    new_char = original_char
    # Garantizar cambio
    for _ in range(10):
        candidate = random.choice(alphabet)
        if candidate != original_char:
            new_char = candidate
            break
    return text[:pos] + new_char + text[pos+1:]

def now_iso() -> str:
    return datetime.now(timezone.utc).isoformat(timespec="seconds")

def pseudo_signature(hash_value: str, timestamp_iso: str, key: str = "DEMO_SECRET") -> str:
    msg = f"{hash_value}|{timestamp_iso}".encode("utf-8")
    return hmac.new(key.encode("utf-8"), msg, hashlib.sha256).hexdigest()

def download_csv_button(df: pd.DataFrame, label: str, filename: str):
    buf = io.StringIO()
    df.to_csv(buf, index=False)
    st.download_button(label, buf.getvalue(), file_name=filename, mime="text/csv")


# ---------------------------
# Cargar datasets
# ---------------------------
@st.cache_data
def load_docs_demo():
    try:
        df = pd.read_csv("data/docs_demo.csv")
        return df
    except Exception as e:
        st.warning("No se encontr√≥ data/docs_demo.csv. Cargando ejemplos por defecto.")
        return pd.DataFrame({
            "id": [1,2],
            "texto": [
                "Nacimiento de Juan P√©rez... Registro Civil Secci√≥n 3¬™.",
                "Matrimonio de Ana L√≥pez y Luis Garc√≠a... Acta n¬∫ 6789."
            ]
        })

@st.cache_data
def load_modelos_confianza():
    try:
        df = pd.read_csv("data/modelos_confianza.csv")
        return df
    except Exception as e:
        st.warning("No se encontr√≥ data/modelos_confianza.csv. Cargando tabla por defecto.")
        return pd.DataFrame({
            "modelo": ["TTP","Blockchain"],
            "rol": ["Notar√≠as/Registro","Nodos/Validadores"],
            "garantia": ["Fe p√∫blica","Inmutabilidad probabil√≠stica"],
            "mecanismos": ["Identidad verificada","Criptograf√≠a+Consenso"],
            "riesgos": ["Error humano","Errores de clave/gobernanza"],
            "ejemplos": ["Registro Civil","Bitcoin/Ethereum"]
        })

docs_df = load_docs_demo()
modelos_df = load_modelos_confianza()

# Estado
if "ledger" not in st.session_state:
    st.session_state.ledger = []  # lista de dicts: {"texto","hash","timestamp","psig"}

# ---------------------------
# Encabezado
# ---------------------------
st.title("UD1 ‚Äî La confianza en el Derecho y la tecnolog√≠a")
st.caption("Asignatura: *Blockchain: fundamentos t√©cnicos y problem√°tica jur√≠dica*")

with st.container():
    c1, c2, c3, c4 = st.columns(4)
    c1.metric("S1", "Hash & Integridad", delta="Registro vs Cadena")
    c2.metric("S2", "Sellado de tiempo", delta="Pseudo-firma (HMAC)")
    c3.metric("Lecturas", "Nakamoto & Lessig", delta="Preguntas gu√≠a")
    c4.metric("Entrega", "S1 + S2", delta="Exportaci√≥n incluida")

st.divider()

# ---------------------------
# Tabs principales
# ---------------------------
tabs = st.tabs([
    "1) Teor√≠a",
    "2) S1 ‚Äî Hash & Cadena de custodia",
    "3) S2 ‚Äî Sellado de tiempo simulado",
    "4) Comparativa Registro vs Ledger",
    "5) Lecturas guiadas",
    "6) Entregables y r√∫brica"
])

# ---------------------------
# 1) Teor√≠a
# ---------------------------
with tabs[0]:
    st.subheader("Confianza: del Derecho a la verificaci√≥n criptogr√°fica")
    st.markdown(
        """
**Fe p√∫blica (Derecho):** garant√≠a institucional de veracidad y autenticidad otorgada por funcionarios/√≥rganos (p. ej. Encargado del Registro, notario).  
**Registro:** sistema formal de asientos (folio/libro) con reglas de **identificaci√≥n, publicidad, prioridad y oponibilidad**.  
**Validaci√≥n:** reglas y procedimientos que confirman requisitos de forma/fondo; control humano y normativo.  
**Trazabilidad:** capacidad de reconstruir el historial **√≠ntegro** y **cronol√≥gico** de un dato/asiento (qui√©n, cu√°ndo, qu√©).

**En blockchain (tecnolog√≠a):**
- **Hash (SHA-256)**: huella digital del contenido. Un cambio m√≠nimo ‚Üí hash distinto (**efecto avalancha**).
- **Cadena de bloques**: cada bloque referencia el hash del anterior ‚Üí **integridad enlazada**.
- **Sellado de tiempo**: fija el momento de creaci√≥n/verificaci√≥n (timestamp) de un estado.
- **Consenso**: reglas algor√≠tmicas para acordar qu√© versi√≥n es v√°lida (PoW/PoS/‚Ä¶) sin un tercero √∫nico.
- **Trazabilidad**: historial inmutable (probabil√≠sticamente) replicado en m√∫ltiples nodos.

> **Idea clave:** el **Derecho** asegura confianza por **autoridad y procedimiento**; la **blockchain**, por **matem√°tica distribuida** (hash, consenso, r√©plica).
"""
    )

    st.markdown("### Mini-demo: calcula el hash de un texto")
    demo_text = st.text_area("Texto", "Acta: Nacimiento de Juan P√©rez, 15/03/1995, Madrid.", height=90)
    st.code(sha256_hex(demo_text), language="bash")
    st.info("Si cambias una sola letra, el hash cambia por completo (efecto avalancha).")

# ---------------------------
# 2) S1 ‚Äî Hash & Cadena de custodia
# ---------------------------
with tabs[1]:
    st.header("S1 ‚Äî Registro centralizado vs cadena con hash")
    st.write("**Objetivo:** ver c√≥mo un cambio m√≠nimo rompe la integridad, y c√≥mo una **cadena** dificulta la alteraci√≥n invisible.")

    colA, colB = st.columns([1,1])
    with colA:
        st.markdown("#### 2.1 Carga un texto de ejemplo")
        pick = st.selectbox(
            "Selecciona un registro demo (puedes editarlo luego):",
            options=docs_df["id"].tolist(),
            format_func=lambda x: f"ID {x}"
        )
        base_text = docs_df.loc[docs_df["id"] == pick, "texto"].values[0]
        text_input = st.text_area("Documento (editable):", base_text, height=120, key="s1_text")

        if st.button("üîÅ Alterar 1 car√°cter", key="alter_btn"):
            st.session_state.s1_altered = alter_one_char(text_input)
        # Estado inicial si a√∫n no existe
        s1_altered = st.session_state.get("s1_altered", text_input)

    with colB:
        st.markdown("#### 2.2 Hash original vs alterado")
        h_original = sha256_hex(text_input)
        h_alterado = sha256_hex(s1_altered)

        c1, c2 = st.columns(2)
        with c1:
            st.caption("Hash original")
            st.code(h_original)
        with c2:
            st.caption("Hash alterado")
            st.code(h_alterado)

        if h_original == h_alterado:
            st.success("Integridad OK: el contenido no ha cambiado.")
        else:
            st.error("‚ö†Ô∏è Integridad rota: el hash no coincide. La cadena de custodia estar√≠a comprometida.")

    st.markdown("#### 2.3 Cadena simulada de 3 asientos")
    st.write("Cada asiento referencia el hash del anterior (prev_hash). Si alteras el primero, **rompes la cadena**.")
    # Construcci√≥n de cadena simple a partir del texto actual
    block1 = {"idx": 1, "contenido": text_input, "hash": sha256_hex(text_input), "prev_hash": "-"}
    block2 = {"idx": 2, "contenido": "Asiento 2: actualizaci√≥n de domicilio.", "hash": "", "prev_hash": block1["hash"]}
    block2["hash"] = sha256_hex(block2["contenido"] + "|" + block2["prev_hash"])
    block3 = {"idx": 3, "contenido": "Asiento 3: rectificaci√≥n ortogr√°fica.", "hash": "", "prev_hash": block2["hash"]}
    block3["hash"] = sha256_hex(block3["contenido"] + "|" + block3["prev_hash"])

    chain_df = pd.DataFrame([block1, block2, block3])
    st.dataframe(chain_df, use_container_width=True)

    st.markdown("#### 2.4 Entrega S1 ‚Äî Explica en 5 l√≠neas")
    s1_entrega = st.text_area(
        "En 5 l√≠neas: ¬øpor qu√© el hash soporta la cadena de custodia y qu√© aporta encadenar hashes?",
        height=120, key="s1_entrega_text"
    )

    colS1a, colS1b = st.columns([1,1])
    with colS1a:
        if st.button("üíæ Guardar entrega S1 (MD)"):
            ts = datetime.now().strftime("%Y%m%d_%H%M%S")
            fname = f"entregas/S1_explicacion_{ts}.md"
            with open(fname, "w", encoding="utf-8") as f:
                f.write("# Entrega S1 ‚Äî Hash & Cadena de custodia\n\n")
                f.write(f"**Fecha:** {ts}\n\n")
                f.write("## Texto base\n\n")
                f.write(text_input + "\n\n")
                f.write(f"**Hash base:** `{h_original}`\n\n")
                f.write("## Explicaci√≥n (m√°x. 5 l√≠neas)\n\n")
                f.write(s1_entrega.strip() + "\n")
            st.success(f"Entrega guardada en {fname}")
    with colS1b:
        st.caption("Criterios: precisi√≥n t√©cnica (40%), claridad (30%), conexi√≥n con custodia (30%).")

# ---------------------------
# 3) S2 ‚Äî Sellado de tiempo simulado
# ---------------------------
with tabs[2]:
    st.header("S2 ‚Äî Sellado de tiempo y pseudo-firma")
    st.write("**Objetivo:** registrar (hash, fecha ISO, pseudo-firma) y comparar TTP vs blockchain.")

    colL, colR = st.columns([1,1])
    with colL:
        s2_text = st.text_area("Texto a registrar (puedes pegar del S1 o nuevo):", height=130, key="s2_text")

        if st.button("üïí Generar hash + timestamp + pseudo-firma"):
            _hash = sha256_hex(s2_text)
            _iso = now_iso()
            _psig = pseudo_signature(_hash, _iso, key="DEMO_SECRET")

            st.session_state.last_record = {"texto": s2_text, "hash": _hash, "timestamp": _iso, "pseudo_firma": _psig}
            st.success("Registro preparado. Revisa la derecha y pulsa 'Registrar en ledger' si est√°s conforme.")

    with colR:
        st.markdown("#### Previsualizaci√≥n del registro")
        last = st.session_state.get("last_record")
        if last:
            st.json(last, expanded=False)
            if st.button("üìå Registrar en ledger"):
                st.session_state.ledger.append(last)
                st.success("A√±adido al mini-ledger local (memoria de la app).")
        else:
            st.info("Genera un registro a la izquierda para previsualizarlo aqu√≠.")

    st.markdown("#### Mini-ledger (local, en memoria)")
    ledger_df = pd.DataFrame(st.session_state.ledger)
    if not ledger_df.empty:
        st.dataframe(ledger_df, use_container_width=True, height=240)
        download_csv_button(ledger_df, "‚¨áÔ∏è Exportar ledger CSV", "ledger_ud1.csv")
    else:
        st.caption("A√∫n no hay entradas registradas.")

    st.markdown("#### Cuadro comparativo: confianza humana vs algor√≠tmica")
    st.dataframe(modelos_df, use_container_width=True)

# ---------------------------
# 4) Comparativa Registro Civil vs Ledger distribuido
# ---------------------------
with tabs[3]:
    st.header("Registro Civil (folio/libro) vs Ledger distribuido (bloques)")
    comp = pd.DataFrame([
        {
            "Funci√≥n jur√≠dica": "Identificaci√≥n / Autenticidad",
            "Derecho (Registro Civil)": "Autoridad del Encargado; verificaci√≥n de identidad; formalidades; fe p√∫blica.",
            "Tecnolog√≠a (Ledger)": "Firmas criptogr√°ficas; claves p√∫blicas; control de acceso y/o permisos en consorcio."
        },
        {
            "Funci√≥n jur√≠dica": "Integridad",
            "Derecho (Registro Civil)": "Cadena de asientos; controles; sellos; copias aut√©nticas.",
            "Tecnolog√≠a (Ledger)": "Hash y encadenamiento de bloques; detecci√≥n inmediata de cambios (diferencia de hash)."
        },
        {
            "Funci√≥n jur√≠dica": "Trazabilidad / Historial",
            "Derecho (Registro Civil)": "Asientos cronol√≥gicos; certificaciones; anotaciones marginales.",
            "Tecnolog√≠a (Ledger)": "Historial inmutable replicado; timestamps; exploradores de bloques."
        },
        {
            "Funci√≥n jur√≠dica": "Publicidad / Oponibilidad",
            "Derecho (Registro Civil)": "Publicidad formal bajo la ley; efectos frente a terceros.",
            "Tecnolog√≠a (Ledger)": "Replicaci√≥n y lectura compartida; en p√∫blico/permisionado seg√∫n dise√±o."
        },
        {
            "Funci√≥n jur√≠dica": "Gobernanza",
            "Derecho (Registro Civil)": "Normas, jerarqu√≠a, recursos, control judicial.",
            "Tecnolog√≠a (Ledger)": "Reglas de consenso y upgrades; gobernanza on/off-chain; riesgos de captura."
        },
    ])
    st.dataframe(comp, use_container_width=True)

    st.info(
        "Conclusi√≥n operativa: la tecnolog√≠a **replica** funciones de **integridad** y **trazabilidad** muy bien; "
        "la **autenticidad** y la **oponibilidad** requieren a menudo acoplar identidad, gobernanza y norma."
    )

# ---------------------------
# 5) Lecturas guiadas
# ---------------------------
with tabs[4]:
    st.header("Lecturas y gu√≠a de estudio")
    st.markdown(
        """
**Nakamoto (2008), introducci√≥n ‚Äî ‚ÄúBitcoin: A Peer-to-Peer Electronic Cash System‚Äù**  
- Qu√© problema ataca: pagos P2P sin intermediario de confianza.  
- Piezas t√©cnicas clave en la intro: transacciones encadenadas, prueba de trabajo, timestamping, nodos honestos.  
- Preguntas gu√≠a:  
  1) ¬øQu√© reemplaza al tercero de confianza?  
  2) ¬øC√≥mo ayuda el timestamping a resolver el doble gasto?  
  3) ¬øPor qu√© la propagaci√≥n y r√©plica aportan robustez?

**Lessig (1999), Cap. 1 ‚Äî ‚ÄúCode is Law‚Äù**  
- Tesis: el **c√≥digo** (arquitectura t√©cnica) regula la conducta como la ley, el mercado y las normas sociales.  
- Preguntas gu√≠a:  
  1) ¬øC√≥mo la arquitectura t√©cnica condiciona lo jur√≠dicamente posible?  
  2) ¬øQu√© riesgos ves si la arquitectura no es auditable ni gobernable?  
  3) ¬øD√≥nde colocar√≠as los ‚Äúcontroles‚Äù en una blockchain p√∫blica vs. permisionada?

**Actividad de integraci√≥n (UD1):**  
- Identifica **3 funciones del Derecho** que **s√≠** replica la tecnolog√≠a de forma fiable.  
- Identifica **2 funciones** que todav√≠a **dependen** de estructuras jur√≠dicas (identidad fuerte, efectos frente a terceros, etc.).
"""
    )

    if st.button("üìÑ Descargar gu√≠a de lectura (MD)"):
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        fname = f"materiales/UD1_lecturas_{ts}.md"
        content = """# Gu√≠a de lectura ‚Äî UD1

## Nakamoto (2008), introducci√≥n
- Problema: pagos P2P sin TTP.
- Claves: cadena de transacciones, PoW, timestamp, nodos honestos.
- Preguntas: (1) Sustituto del TTP; (2) Timestamp y doble gasto; (3) R√©plica/propagaci√≥n.

## Lessig (1999), Cap. 1
- Tesis: el c√≥digo regula (como la ley/mercado/normas).
- Preguntas: arquitectura y posibilidad jur√≠dica; auditabilidad/gobernanza; controles en p√∫blica vs permisionada.

## Integraci√≥n
- 3 funciones replicadas (tecnolog√≠a): integridad, trazabilidad, disponibilidad.
- 2 funciones dependientes (jur√≠dicas): identidad fuerte, oponibilidad/efectos frente a terceros.
"""
        with open(fname, "w", encoding="utf-8") as f:
            f.write(content)
        st.success(f"Gu√≠a guardada en {fname}")

# ---------------------------
# 6) Entregables y r√∫brica
# ---------------------------
with tabs[5]:
    st.header("Entregables (Semana 1) y r√∫brica")

    st.subheader("Entrega S1 ‚Äî 5 l√≠neas (hash y cadena de custodia)")
    st.write("Sube la explicaci√≥n ya guardada en S1 o p√©gala aqu√≠ si la vas a exportar aparte.")
    s1_extra = st.text_area("(Opcional) Pegar explicaci√≥n S1 aqu√≠:", height=120)

    st.subheader("Entrega S2 ‚Äî Cuadro comparativo: confianza humana vs algor√≠tmica")
    st.write("Completa el cuadro con tus propios matices. Puedes exportarlo.")
    cols = ["Aspecto", "Confianza humana (TTP)", "Confianza algor√≠tmica (Blockchain)"]
    s2_base = pd.DataFrame([
        ["Garant√≠a de veracidad", "Fe p√∫blica / autoridad / procedimiento", "Criptograf√≠a / consenso / r√©plica"],
        ["Integridad", "Sellos, controles, copias aut√©nticas", "Hash encadenado, detecci√≥n de cambios"],
        ["Trazabilidad", "Asientos cronol√≥gicos y certificaciones", "Historial inmutable con timestamp"],
        ["Identidad", "Verificaci√≥n presencial/administrativa", "Claves p√∫blicas; capas de identidad externa"],
        ["Oponibilidad", "Efectos legales frente a terceros", "Depende del reconocimiento normativo/gobernanza"],
    ], columns=cols)
    s2_edit = st.experimental_data_editor(s2_base, num_rows="dynamic", use_container_width=True)

    cL, cR = st.columns([1,1])
    with cL:
        if st.button("‚¨áÔ∏è Exportar comparativo S2 (CSV)"):
            download_csv_button(s2_edit, "Descargar CSV", "S2_comparativo.csv")
    with cR:
        st.caption("R√∫brica (ambas entregas): precisi√≥n (40%), claridad (30%), aplicaci√≥n (30%).")

    st.markdown("---")
    st.markdown(
        f"""
**Resultado de aprendizaje (UD1):** identificar qu√© funciones del Derecho **replica** la tecnolog√≠a  
(**RA1**), evaluar herramientas de privacidad/ciberseguridad b√°sicas (**RA2**) y aplicar nociones de sistemas de informaci√≥n a soluciones legales (**RA3**).
"""
    )

    st.caption("Aviso: la pseudo-firma HMAC aqu√≠ mostrada es **docente** y no equivale a firma electr√≥nica cualificada.")

# Fin
